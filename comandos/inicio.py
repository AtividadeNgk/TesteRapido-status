import modules.manager as manager
import json, re, requests


from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters, Updater, CallbackContext, ChatJoinRequestHandler
from telegram.error import BadRequest, Conflict

from modules.utils import process_command, is_admin, cancel, error_callback, error_message

keyboardc = [
            [InlineKeyboardButton("‚ùå Cancelar", callback_data="cancelar")]
        ]
cancel_markup = InlineKeyboardMarkup(keyboardc)


INICIO_ESCOLHA, INICIO_ADICIONAR_OU_DELETAR, INICIO_RECEBER = range(3)


# Comando definir inicio
# /Inicio
async def inicio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    command_check = await process_command(update, context)
    if not command_check:
        return ConversationHandler.END

    if not await is_admin(context, update.message.from_user.id):
        return ConversationHandler.END
    
    context.user_data['inicio_context'] = manager.get_bot_config(context.bot_data['id'])
    context.user_data['conv_state'] = "inicio"

    keyboard = [
        [InlineKeyboardButton("Midia Inicial", callback_data="midia"), InlineKeyboardButton("Texto 1", callback_data="texto1")],
        [InlineKeyboardButton("Texto 2", callback_data="texto2"), InlineKeyboardButton("Bot√£o", callback_data="botao")],
        [InlineKeyboardButton("‚ùå Cancelar", callback_data="cancelar")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üì± O que deseja modificar no in√≠cio?\n\n"
        ">ùóñùóºùó∫ùóº ùó≥ùòÇùóªùó∞ùó∂ùóºùóªùóÆ\\? Esse comando serve para personalizar o in√≠cio do seu bot\\. Personalize textos, midia inicial e o bot√£o inicial\\.",
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )
    return INICIO_ESCOLHA

async def inicio_escolha(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == 'cancelar':
        await cancel(update, context)
        return ConversationHandler.END

    context.user_data['inicio_acao'] = query.data

    # Se for bot√£o, vai direto para receber o texto
    if query.data == 'botao':
        keyboard = [[InlineKeyboardButton("‚ùå Cancelar", callback_data="cancelar")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "üïπ Envie abaixo o texto que deseja para o bot√£o inicial\n\n"
            ">ùóñùóºùó∫ùóº ùó≥ùòÇùóªùó∞ùó∂ùóºùóªùóÆ\\? Esse texto √© aplicado no bot√£o que o usu√°rio clica para exibir a lista de planos no in√≠cio do bot\\.",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
        return INICIO_RECEBER

    keyboard = [
        [InlineKeyboardButton("üü¢ Adicionar", callback_data="adicionar"), InlineKeyboardButton("üßπ Remover", callback_data="deletar")],
        [InlineKeyboardButton("‚ùå Cancelar", callback_data="cancelar")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    # Textos espec√≠ficos para cada op√ß√£o
    if query.data == 'midia':
        texto = "üé¨ O que deseja fazer com a m√≠dia inicial?"
    elif query.data == 'texto1':
        texto = "üìù O que deseja fazer com o Texto 1?"
    elif query.data == 'texto2':
        texto = "üìù O que deseja fazer com o Texto 2?"
    else:
        texto = f"üõ†Ô∏è Deseja adicionar ou deletar o valor para {query.data}?"
    
    await query.message.edit_text(texto, reply_markup=reply_markup)
    return INICIO_ADICIONAR_OU_DELETAR

async def inicio_adicionar_ou_deletar(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    acao = context.user_data.get('inicio_acao')
    if query.data == 'cancelar':
        await cancel(update, context)
        return ConversationHandler.END

    if query.data == 'deletar':
        # Verifica se o texto j√° foi definido
        if acao == 'texto2' and not context.user_data['inicio_context'].get('texto2'):
            await query.message.edit_text("‚ùå N√£o √© poss√≠vel deletar o Texto 2, pois o mesmo ainda n√£o foi definido.")
            context.user_data['conv_state'] = False
            return ConversationHandler.END
            
        if acao == 'texto1' and not context.user_data['inicio_context'].get('texto1'):
            await query.message.edit_text("‚ùå N√£o √© poss√≠vel deletar o Texto 1, pois o mesmo ainda n√£o foi definido.")
            context.user_data['conv_state'] = False
            return ConversationHandler.END

        context.user_data['inicio_context'][acao] = False
        
        # Mensagens personalizadas para remo√ß√£o
        if acao == 'midia':
            await query.message.edit_text("‚úÖ M√≠dia inicial removida com sucesso.")
        elif acao == 'texto1':
            await query.message.edit_text("‚úÖ Texto 1 foi removido com sucesso.")
        elif acao == 'texto2':
            await query.message.edit_text("‚úÖ Texto 2 foi removido com sucesso.")
        else:
            await query.message.edit_text(f"‚úÖ {acao.capitalize()} foi deletado com sucesso.")
            
        manager.update_bot_config(context.bot_data['id'], context.user_data['inicio_context'])
        
        context.user_data['conv_state'] = False
        return ConversationHandler.END

    elif query.data == 'adicionar':
        keyboard = [[InlineKeyboardButton("‚ùå Cancelar", callback_data="cancelar")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if acao == "midia":
            await query.message.edit_text(
                "üé¨ Envie abaixo a m√≠dia inicial que deseja definir ‚¨ã\n\n"
                ">ùóñùóºùó∫ùóº ùó≥ùòÇùóªùó∞ùó∂ùóºùóªùóÆ\\? A m√≠dia enviada ser√° aplicada no in√≠cio do seu bot\\.",
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )
        elif acao == "texto1":
            await query.message.edit_text("üìù Envie o Texto 1.", reply_markup=reply_markup)
        elif acao == "texto2":
            await query.message.edit_text("üìù Envie o Texto 2.", reply_markup=reply_markup)
        return INICIO_RECEBER

async def inicio_receber(update: Update, context: ContextTypes.DEFAULT_TYPE):
    acao = context.user_data.get('inicio_acao')
    for i in range(10):
        print('receber')
    mensagem = update.message.text if update.message else None
    try:
        if acao == "midia":
            if update.message.photo or update.message.video:
                try:
                    media_file = await (update.message.photo[-1] if update.message.photo else update.message.video).get_file()
                    context.user_data['inicio_context']['midia'] = {
                        'file': media_file.file_id,
                        'type': 'photo' if update.message.photo else 'video'
                    }
                    await update.message.reply_text("‚úÖ M√≠dia inicial atualizada com sucesso.")
                    manager.update_bot_config(context.bot_data['id'], context.user_data['inicio_context'])
                except Exception as media_error:
                    if "File is too big" in str(media_error) or "file is too big" in str(media_error).lower():
                        await update.message.reply_text(
                            "‚ùå O Telegram limita m√≠dias a 20MB para bots\\. Por favor, envie uma menor\\.\n\n"
                            ">ùóóùó∂ùó∞ùóÆ\\: Bots do Telegram s√≥ aceitam m√≠dias de at√© 20MB\\. Use um compressor de v√≠deos online para reduzir o tamanho da sua m√≠dia\\.",
                            reply_markup=cancel_markup,
                            parse_mode='MarkdownV2'
                        )
                        return INICIO_RECEBER
                    else:
                        raise media_error
            else:
                for i in range(10):
                    print('erro')
                await update.message.reply_text("‚õîÔ∏è Por favor, envie apenas m√≠dia.", reply_markup=cancel_markup)
                return INICIO_RECEBER

        elif acao in ["texto1", "texto2"]:
            # Verifica se √© texto puro (n√£o √© m√≠dia, sticker, documento, √°udio, etc)
            if not update.message.text or update.message.photo or update.message.video or update.message.sticker or update.message.document or update.message.audio or update.message.voice or update.message.video_note or update.message.animation:
                await update.message.reply_text("‚õî Por favor, envie apenas texto.", reply_markup=cancel_markup)
                return INICIO_RECEBER
            context.user_data['inicio_context'][acao] = mensagem
            if acao == "texto1":
                await update.message.reply_text("‚úÖ Texto 1 atualizado com sucesso.")
            else:
                await update.message.reply_text("‚úÖ Texto 2 atualizado com sucesso.")
            manager.update_bot_config(context.bot_data['id'], context.user_data['inicio_context'])
            
        elif acao == "botao":
            # Verifica se √© texto puro (n√£o √© m√≠dia, sticker, documento, √°udio, etc)
            if not update.message.text or update.message.photo or update.message.video or update.message.sticker or update.message.document or update.message.audio or update.message.voice or update.message.video_note or update.message.animation:
                await update.message.reply_text("‚õî Por favor, envie apenas texto.", reply_markup=cancel_markup)
                return INICIO_RECEBER
            context.user_data['inicio_context']['button'] = mensagem
            await update.message.reply_text("‚úÖ Texto do bot√£o inicial atualizado com sucesso.")
            manager.update_bot_config(context.bot_data['id'], context.user_data['inicio_context'])

    except Exception as e:
        print('erro')
        await update.message.reply_text(f"‚õî Erro ao modificar o inicio: {str(e)}")
        context.user_data['conv_state'] = False
        return ConversationHandler.END

    context.user_data['conv_state'] = False
    return ConversationHandler.END


conv_handler_inicio = ConversationHandler(
    entry_points=[CommandHandler("inicio", inicio)],
    states={
        INICIO_ESCOLHA: [CallbackQueryHandler(inicio_escolha)],
        INICIO_ADICIONAR_OU_DELETAR: [CallbackQueryHandler(inicio_adicionar_ou_deletar)],
        INICIO_RECEBER: [MessageHandler(filters.ALL, inicio_receber)]
    },
    fallbacks=[CallbackQueryHandler(cancel)],
)
